import java.io.*;
import java.util.*;
import java.awt.Color;
import java.awt.EventQueue;

import com.source.TwitterMessenger;

import javax.swing.JFrame;


public class Kalah {
	public static void main(String args[]){
			final KalahGui gui = new KalahGui();
			gui.setVisible(true);
			//GUI code
			EventQueue.invokeLater(new Runnable(){
				@Override
				public void run(){
				}
			});
			TwitterMessenger twit = new TwitterMessenger(3);
			//twit.post("Travis", "Howdy Partner plp iji");
			//twit.getPosts("travis");
			//String posts[] = twit.getPosts("Travis");
			//for(int i = 0; i<posts.length;i++){
			//	System.out.println(posts[i]);
			//}
			//algorithmic code
			int board[] = {3,3,3,3,3,3,0,3,3,3,3,3,3,0}; //the board for the game
			Scanner sc = new Scanner(System.in);
			int turn = 0;
			//test case
			while(checkEnd(board)){
				boolean again = false;// see if the player scored in store allowing another turn
				System.out.println("turn: "+turn);
				//again = move(board, sc.nextInt(), turn);
				//if(!again){
				//	if(turn == 1) turn = 0;
				//	else turn = 1;
				//}
				System.out.println(gui.makeMove(sc.nextInt()));
				
			}
	}
	
	/**
	 * Recursive call for the solution of the board
	 */
	public static void checkFuture(int board[], int wins){
		
		
	}
	
	
	/**
	 * Make the move for the player
	 * @return whether the player can continue
	 */
	public static boolean move(int board[],int pos,int turn){
		boolean continuous = false;
		int seeds=board[pos];
		//move the pieces around the board
		for (int i=0;i<seeds+1;i++){
			board[(pos+i)%14]++;
		}
		board[pos] = 0;
		//check if seed landed in store
		if (pos+seeds == 6 + 7*turn){
			continuous = true;
		}
		//check if steal occurs
		if (board[(pos+seeds)%14] == 1&&pos+seeds<6+7*turn){
				board[6+7*turn] = board[12-(pos+seeds)] + board[6+7*turn]+1; // move points into scoreing
				board[12-(pos+seeds)] = 0; // remove points from opponent
				board[pos+seeds] = 0;
		}
		printBoard(board);
		return continuous;
	}
	
	/**
	 * prints the board
	 */
	public static void printBoard(int board[]){
		for (int i=13;i>6;i--){
			System.out.print(board[i]);
		}
		System.out.print("\n ");
		for (int i=0;i<7;i++){
			System.out.print(board[i]);
		}
		System.out.println();
		
	}
	
	/**
	 * Check if the game is over because one side of the board is empty 
	 * @param board the integer array of the board
	 * @return
	 */
	public static boolean checkEnd(int[] board){
		boolean end=false;
		//check my side
		for (int i =0;i<6;i++){
			if(board[i] != 0){
				end = true;
				break;
			}
		}
		if(!end)return end;
		//check my opponents side
		for (int i=7;i<13;i++){
			if(board[i] != 0){
				end = true;
				break;
			}
		}
		
		return end;
			
	}
}
